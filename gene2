#!/usr/bin/python

import argparse

parser = argparse.ArgumentParser(description='genefiles')

parser.add_argument('filename', type=argparse.FileType('r'), help='Insert a File name')
parser.add_argument('-t', '--TaxID', type=str, nargs='*', action='store', required='true', dest='TAXID', help='Add ID Values')
parser.add_argument('--case_sensitive', action='store_true', default=False, help='Case Sensetivity, flag')
args = parser.parse_args()

# Define variables
taxIDdict = {}
Synlistfull = {}
Synlistfull2 = {}
dicKey={}
dicKey2={}
SymbolDict={}
SymbolDict2={}
GeneDict={}
DesDict={}
Syncount=0
GeneCount=0
SymbCount=0




# DONE: 1) Loop through the input file line by line
# Loop through file line by line
for ln in args.filename:

    if not ln.startswith('#'):

        #Case Sensitive no:
        if not args.case_sensitive:
            ln_mixed_case = ln
            ln = ln.lower()


        # DONE 8: add a test to ignore the header line which begins with a "#"

        # DONE: 2) for the current line get the current Tax_id, Symbol, Synonyms and GeneID into variables
        #   parse synonyms delimited by '|" to a list
        # TODO: 11) Capture description field 8
        # print (ln)

        lnsplit = ln.strip("\t").split("\t")
        tax_id=lnsplit[0]
        GeneID=lnsplit[1]
        Symbol=lnsplit[2]
        Synonyms=lnsplit[4]
        Synlist=Synonyms.split("|")

        lnMCsplit=ln_mixed_case.strip("\t").split("\t")
        lnMCTaxId=lnMCsplit[0]
        lnMCGID=lnMCsplit[1]
        lnMCSymbol=lnMCsplit[2]
        lnMCSyn=lnMCsplit[4]
        lnMCDESCRIPTION=lnMCsplit[8]
        lnMcSynlist=lnMCSyn.split("|")







        # print(Synlist)

        # DONE: 3) Test if the tax_id for this line is in the list input from the command line by the user
        #   If so do 4 and 5
        #   else next line
        #   increment taxID dictionary, key = ignored
        #   if not add it to the Symbol dictionary and set count to 1, if so increment its count

        if tax_id in args.TAXID:

            # DONE: 4)
            #   increment taxID dictionary
            #   Check to see if we have seen the Symbol before in the Symbol dictionary
            if tax_id in taxIDdict.keys():

                taxIDdict[tax_id] += 1

            else:

                taxIDdict[tax_id]=1

        else:
            if 'taxon ignored' in taxIDdict.keys():

                taxIDdict['taxon ignored'] += 1

            else:

                taxIDdict['taxon ignored'] = 1

      #Syn Dict- Might be wrong- probably is
        if tax_id in args.TAXID:

            for dicKey in Synlist:

                if not dicKey==("-"):

                    if dicKey in Synlistfull.keys():
                        dicKey.lower()==dicKey


                        Synlistfull[dicKey]+=1

                    else:
                        Synlistfull[dicKey]=1

                        Syncount += 1






######################
        for lnMCSyn in [key.lower() for key in Synlistfull.keys()]:



            for dicKey2 in lnMcSynlist:
                if not dicKey2==("-"):


                    if dicKey2 in Synlistfull2.keys():
                        dicKey2.lower() == dicKey2


###Acts up right here
                        Synlistfull2[dicKey2]+=0

                    else:
                        Synlistfull2[dicKey2]=1


    #Symbol Dict
        if tax_id in args.TAXID:

                if Symbol in SymbolDict:

                    SymbolDict[Symbol]+=1

                else:

                    SymbolDict[Symbol]=1

                SymbCount+=1
### actually works
        if lnMCSymbol.lower() in [key.lower() for key in SymbolDict.keys()]:
            if lnMCSymbol in SymbolDict2:
                SymbolDict2[lnMCSymbol]+=1
            else:
                SymbolDict2[lnMCSymbol]=1




    #GeneID Dict
        if tax_id in args.TAXID:

            if GeneID in GeneDict:

                GeneDict[GeneID]+=1
            else:
                GeneDict[GeneID]=1

            GeneCount+=1
        if tax_id in args.TAXID:
            if lnMCDESCRIPTION in DesDict:
                DesDict[lnMCDESCRIPTION]+=1
            else:
                DesDict[lnMCDESCRIPTION]=1









# print('Symbol list return: \n',SymbolDict2)
# print("\t")
# print("\t")



# Matching keys in Synlist if in Symbollist
for matchingKey in Synlistfull.keys():

    if matchingKey in SymbolDict:
        # for refrence that works: will not report on it if it does
        # print('Error Repeat:', matchingKey)
        del Synlistfull[matchingKey]

# print("\t")
# print("\t")
for SynListkey, SynValue in Synlistfull.items():
    if SynListkey in Synlistfull:
        if SynValue>=2:

            # print ('Error Duplicate SynKey:', SynListkey,'Found',SynValue,'Times')
            del Synlistfull[SynListkey]
#
# print("\t")
# print("\t")

# Gene Symbols unique check
for Genekey,value in GeneDict.items():

    if Genekey in GeneDict:

        if value > 1:
            # Should we keep one of the keys ?
            # GeneKeyOneCount = {Genekey: 1}
            # print ('Error Duplicate Key:', Genekey,'Found',value,'Times')

            del GeneDict[Genekey]
            #Adds the key we deleted with a 1 count vs what it orginal had
#
# print('GeneList\n',GeneDict)
# print("\t")
# print("\t")
#####################Match Case on Synlist works:
for matchCasekey in Synlistfull2.keys():
    if not matchCasekey.lower() in Synlistfull.keys():
        # print(matchCasekey)
        # print(True)
        del Synlistfull2[matchCasekey]

#
# print('Output Synlist:')
# print(Synlistfull2)


keylist=[]
# ######### output file
# zip(GeneDict,lnMCDESCRIPTION,Synlistfull2)
with open('outputfile','w+') as fileoutput:
    outputGenelist=':'.join(GeneDict.keys())
    outputDescription = ':'.join(DesDict.keys())

    outputSynlist = ': '.join(Synlistfull2.keys())
    # print(outputSynlist)
    for item in fileoutput:
        outputGenelist,outputDescription,outputSynlist= item.strip().split('\t')
        outputGenelist.appemd(outputGenelist)
        outputDescription.append(outputDescription)
        outputSynlist.appemd(outputSynlist)
        fileoutput.write(outputGenelist+"\t"+outputDescription+"\t"+outputSynlist)



    # print(Synlistfull2.keys())
    #
    # print(args.TAXID,'\t')
    # print(GeneDict, '\t')
    # print('Synonyms: ')
















#
# print('TAXID')
# print(taxIDdict)
# print('\nGeneIDs' )
# print(GeneCount)
# print(GeneDict)
# print('\nSymbolIDs')
# print(SymbCount)
# print(SymbolDict)
# print('\nTotal Synonyms Seen')
# print(Syncount)
# print('\nSynonymList View')
# print(Synlistfull)

# DONE: 5)
#   Add code to populate symbolDict
#   Add code to populate synonymlDict, include splitting pipe character delimited synonyms
#   Add code to populate geneIDdict

# print (taxIDdict)

# DONE: 6)
#   After all lines of the file have been processed, report on the Symbols and the Synonyms
#   how may total entries in taxID dictionary, how many for each taxID and "ignored"
#   how many total symbols and
#   how many total synonyms

# DEPRICATED: 7)
#   How many are unique?
#   How many are present more than once?

# DONE 9)
#   Do we need to compare gene and synonyms case insensitaivly?
#   add command line option "-i", flag boolean, default false
#   if the option is set all comparisons will be case insensitive
#   otherwise all comparisons are case sensitive

# TODO 10)
#   Logic
#   go through the file line by line again
#   use mixed case values for output, do the comparisons to the exsisting dictionaries insensitivly
#   Gene symbols should be unique
#   If not report error and gene symbol, do not report in output
#   If a synonym matches a symbol, do not report the synonym in the output
#   If a synonym is present more than once do not report the synonyms in the output in any case
#   Output is tab delimited, use original mixed case:
#   Gene Symbol "\t" Description "\t" Synonyms (multiple synonyms seperated by semicolons) "\n"